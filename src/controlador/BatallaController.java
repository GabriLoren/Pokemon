package controlador;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.util.Date;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.ResourceBundle;

import crud.CargarEntrenador;
import crud.CargarTodosLosEntrenadores;
import crud.PokemonEntrenadorCrud;
import funcionalidades.ActualizarPokedollarEntrenador;
import funcionalidades.Batalla;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.stage.Modality;
import javafx.stage.Stage;
import modelo.Logger;
import modelo.Move;
import modelo.Pokemon;
import modelo.Trainer;

public class BatallaController implements Initializable {
	
	@FXML
	private Button atacar;
	@FXML
	private Button cambiar;
	@FXML
	private Label muestraTurno;
	@FXML
	private ImageView imagenJugador;
	@FXML
	private ProgressBar barraMaquina;
	@FXML
	private ProgressBar barraEstaminaMaquina;
	@FXML
	private ProgressBar barraEstaminaJugador;
	@FXML
	private ImageView imagenOponente;
	@FXML
	private Button descansar;
	@FXML
	private Button elegirMovimiento;
	@FXML
	private ProgressBar barra;

	double vidaJugador;

	double vidaMaquina;

	Pokemon pokemonElegido;

	Image imagenAtaqueJugador;

	// imagen de fondo de la vista ResultadoCombate
	static Image imagenResultado;
//--------------------------------------------------------------------------------------

	private static int contadorJugador = 0;

	private static int contadorMaquina = 0;

	// todos los entrenadores que hay en la base de datos
	private static LinkedList<Trainer> todosLosEntrenadores = CargarTodosLosEntrenadores.getTodosLosEntrenadores();

	static Trainer entrenadorJugador = CargarEntrenador.getEntrenador();

	static Trainer entrenadorAleatorio;

	// hacemos una copia para no eliminarlos del equipo permanentemente
	static LinkedList<Pokemon> equipoJugador;

	private static LinkedList<Pokemon> equipoMaquina;

	static Pokemon pokemonElegidoJugador;

	static Pokemon pokemonElegidoMaquina;

	static LinkedList<Move> movimientosPokemonEnCombate;

	private static Move movimietoJugador;

	private static Move movimietoMaquina;

	private String turnoJugador;

	private String turnoOponente;

	static String resultado;

	private String data;

	private int turno;
	
	private MediaPlayer mediaPlayer;
	
	private BufferedWriter log;

//--------------------------------------------------------------------------------------------

//	Image imagenAtaqueJugador = new Image(getClass().getResourceAsStream("p2.jpg"));

	public static Pokemon getPokemonElegidoJugador() {
		return pokemonElegidoJugador;
	}

	// Event Listener on Button[#descansar].onAction
	@FXML
	public void descansar(ActionEvent event) throws IOException {
		// TODO Autogenerated

		pokemonElegidoJugador.recuperarEstamina();

		turno++;

		// ATACA LA MAQUINA

		movimietoMaquina = Batalla.movimientoAleatorioMaquina(pokemonElegidoMaquina);

		if (Batalla.comprobraEstamina(pokemonElegidoMaquina, movimietoMaquina)) {

			if (Batalla.atacar(pokemonElegidoMaquina, pokemonElegidoJugador, movimietoMaquina)) {

				if (Batalla.vidaPokemonAtacado(pokemonElegidoJugador)) {

					contadorJugador++;

					equipoJugador.remove(pokemonElegidoJugador);

					if (equipoJugador.size() > 0) {

						// se abre la ventana con los pokemon del jugador para que seleccione otro
						FXMLLoader loader2 = new FXMLLoader(getClass().getResource("/vista/ElegirPokemonBatalla.fxml"));

						Parent root2 = loader2.load();

						Scene scene2 = new Scene(root2);

						Stage stage2 = new Stage();

//						stage.initModality(Modality.APPLICATION_MODAL); //(hace que la ventana sea modal)

						stage2.setScene(scene2);
						stage2.showAndWait();

						pokemonElegidoJugador = ElegirPokemonBatallaController.pokemonElegido;

						imagenAtaqueJugador = new Image(
								getClass().getResourceAsStream(pokemonElegidoJugador.getImagen()));

						imagenJugador.setImage(imagenAtaqueJugador);

					}

				}

			}
			turnoOponente = "la máquina ha elegido " + movimietoMaquina.getName();

		} else {

			turnoOponente = "La maquina descansa, no tiene suficiente estamina";

			pokemonElegidoMaquina.recuperarEstamina();
		}

		vidaJugador = pokemonElegidoJugador.getVit();

		double vidaJugadorDouble = vidaJugador / 100;
		System.out.println("vida jugador" + vidaJugadorDouble);

		barra.setProgress(vidaJugadorDouble);

		// el jugador pierde
		if (contadorJugador == entrenadorJugador.getEquipoPokemon().size()) {

			log = Logger.getOrCreateFileWriter();
			Date date = new Date();
			data = date.toString() + " INFO finPierdeCombate " + entrenadorJugador.getName() + " pierde contra "
					+ entrenadorAleatorio.getName() + ", turno = " + turno + "\n";
			Logger.write(log, data);
			Logger.close(log);

			contadorJugador = 0;

			contadorMaquina = 0;

			Batalla.restablecerVidaYEstamina(entrenadorJugador.getEquipoPokemon());

			Batalla.restablecerVidaYEstamina(entrenadorAleatorio.getEquipoPokemon());

			// la foto de fondo de la vista ResultadoCombate cambia dependiendo de si gana o
			// pierde el combate
			imagenResultado = new Image(getClass().getResourceAsStream("/img/resultadoCombatePierde.jpg"));

			resultado = "Lo siento, has perdido\n" + "Tu saldo actual es de " + entrenadorJugador.getPokeDollar()
					+ " pokedollares";

			// se cierra la ventana actual
			Stage stage2 = (Stage) this.atacar.getScene().getWindow();
			stage2.close();

			// se abre cuando se termina el combate, indica como ha concluido
			FXMLLoader loader2 = new FXMLLoader(getClass().getResource("/vista/ResultadoCombate.fxml"));

			Parent root2 = loader2.load();

			Scene scene2 = new Scene(root2);

			Stage stage3 = new Stage();

			stage3.initModality(Modality.APPLICATION_MODAL); // (hace que la ventana sea modal)

			stage3.setScene(scene2);
			stage3.showAndWait();

		}

		turnoJugador = "HAS DESCANSADO";

		muestraTurno.setText(turnoJugador + "\n" + "\n" + turnoOponente);

		barraEstaminaJugador.setProgress((double) pokemonElegidoJugador.getStamina() / (double) 100);

		barraEstaminaMaquina.setProgress((double) pokemonElegidoMaquina.getStamina() / (double) 100);

	}

	// Event Listener on Button[#atacar].onMousePressed
	@FXML
	public void pressedAtacar(MouseEvent event) {
		// TODO Autogenerated

//		Image imagenAtaqueJugador2 = new Image(getClass().getResourceAsStream(pokemonElegidoMaquina.getImagen()));
//
//		imagenJugador.setImage(imagenAtaqueJugador2);
	}

	// Event Listener on Button[#atacar].onMouseReleased
	@FXML
	public void releasedAtacar(MouseEvent event) {
		// TODO Autogenerated

//		imagenJugador.setImage(imagenAtaqueJugador);

	}

	// Event Listener on Button[#salir].onAction
	@FXML
	public void elegirMovimiento(ActionEvent event) throws IOException {
		// TODO Autogenerated

		// abre la ventana Elegirmovimiento
		FXMLLoader loader = new FXMLLoader(getClass().getResource("/vista/ElegirMovimientos.fxml"));

		Parent root = loader.load();

		ElegirMovimientosController controlador = loader.getController();

		controlador.setMovimientosPokemonEnCombate(movimientosPokemonEnCombate);

		Scene scene = new Scene(root);

		Stage stage = new Stage();
//						stage.initModality(Modality.APPLICATION_MODAL); (hace que la ventana sea modal)
		stage.setScene(scene);

		// espera hasta que se cierre ElegirMovimientos para seguir ejecutando códifo
		stage.showAndWait();

		movimietoJugador = controlador.getMovimietoSeleccionado();

		turnoJugador = "Has elegido " + movimietoJugador.getName();

		turnoOponente = "";

		muestraTurno.setText(turnoJugador + "\n" + "\n" + turnoOponente);
	}

	// Event Listener on Button[#cambiar].onAction
	@FXML
	public void cambiar(ActionEvent event) throws IOException {
		// TODO Autogenerated
//		// abre la ventana Captura
		// se abre la ventana con los pokemon del jugador para que seleccione otro
		FXMLLoader loader2 = new FXMLLoader(getClass().getResource("/vista/ElegirPokemonBatalla.fxml"));

		Parent root2 = loader2.load();

		Scene scene2 = new Scene(root2);

		Stage stage2 = new Stage();

//		stage.initModality(Modality.APPLICATION_MODAL); //(hace que la ventana sea modal)

		stage2.setScene(scene2);
		stage2.showAndWait();

		pokemonElegidoJugador = ElegirPokemonBatallaController.pokemonElegido;

		imagenAtaqueJugador = new Image(getClass().getResourceAsStream(pokemonElegidoJugador.getImagen()));

		imagenJugador.setImage(imagenAtaqueJugador);

		barra.setProgress((double) pokemonElegidoJugador.getVit() / (double) 100);

		barraEstaminaJugador.setProgress((double) pokemonElegidoJugador.getStamina() / (double) 100);

		movimietoJugador = null;

		turnoJugador = "";

		turnoOponente = "";

		muestraTurno.setText(turnoJugador + "\n" + "\n" + turnoOponente);
		
		log = Logger.getOrCreateFileWriter();
		Date date = new Date();
		data = date.toString() + " INFO cambio1 " + entrenadorJugador.getName() + " cambia a su pokemon por "
				+ pokemonElegidoJugador.getName() + ", turno = " + turno + "\n";
		Logger.write(log, data);
		Logger.close(log);

	}

	// Event Listener on Button[#atacar].onAction
	@FXML
	public void atacar(ActionEvent event) throws IOException {
		// TODO Autogenerated

		// si no ha elegido un movimiento aún
		if (movimietoJugador == null) {
			// abre la ventana Elegirmovimiento
			FXMLLoader loader = new FXMLLoader(getClass().getResource("/vista/ElegirMovimientos.fxml"));

			Parent root = loader.load();

			ElegirMovimientosController controlador = loader.getController();

			controlador.setMovimientosPokemonEnCombate(movimientosPokemonEnCombate);

			Scene scene = new Scene(root);

			Stage stage = new Stage();
//							stage.initModality(Modality.APPLICATION_MODAL); (hace que la ventana sea modal)
			stage.setScene(scene);

			// espera hasta que se cierre ElegirMovimientos para seguir ejecutando códifo
			stage.showAndWait();

			movimietoJugador = controlador.getMovimietoSeleccionado();

			turnoJugador = "Has elegido " + movimietoJugador.getName();

			if (movimietoMaquina == null)
				turnoOponente = "";
		}
		// ataca jugador
		else if (Batalla.comprobraEstamina(pokemonElegidoJugador, movimietoJugador)) {

			if (Batalla.atacar(pokemonElegidoJugador, pokemonElegidoMaquina, movimietoJugador)) {

				turnoJugador = "has elegido " + movimietoJugador.getName();
				turno++;

				// si entra es que el jugador ha matado al pokemon de la máquina
				if (Batalla.vidaPokemonAtacado(pokemonElegidoMaquina)) {
					System.out.println("valor del contadorMaquina " + contadorMaquina);
					
					log = Logger.getOrCreateFileWriter();
					Date date = new Date();
					data = date.toString() + " INFO debilitado2 pokemon = {" + pokemonElegidoJugador.getName() + ", "
							+ pokemonElegidoJugador.getLevel() + ", " + entrenadorJugador.getName() + "}, pokemonRival = {"
							+ pokemonElegidoMaquina.getName() + ", " + pokemonElegidoMaquina.getLevel() + ", "
							+ entrenadorAleatorio.getName() + "}, turno = " + turno + "\n";
					Logger.write(log, data);
					Logger.close(log);
					
					contadorMaquina++;
					

					// al matar a la máquina el pokemon jugador gana experiencia
					
					if(pokemonElegidoJugador.giveExp(pokemonElegidoMaquina)) {
						
//						AprenderMovimientoController.lblAprenderMov.setText("HAS APRENDIDO "+pokemonElegidoJugador.getMoves().getLast());
						
						// abre la ventana si ha aprendido un movimiento nuevo
						FXMLLoader loader = new FXMLLoader(getClass().getResource("/vista/AprenderMovimiento.fxml"));

						Parent root = loader.load();

						Scene scene = new Scene(root);

						Stage stage = new Stage();
//										stage.initModality(Modality.APPLICATION_MODAL); (hace que la ventana sea modal)
						stage.setScene(scene);

						// espera hasta que se cierre ElegirMovimientos para seguir ejecutando códifo
						stage.showAndWait();
						
					}

					PokemonEntrenadorCrud.actualizarPokemonEnBbDd(pokemonElegidoJugador);
					
					PokemonEntrenadorCrud.actualizarMovimientoPokemonEnBbDd(pokemonElegidoJugador);

					if (contadorMaquina < equipoMaquina.size())
						pokemonElegidoMaquina = equipoMaquina.get(contadorMaquina);

					Image imagenMaquina = new Image(getClass().getResourceAsStream(pokemonElegidoMaquina.getImagen()));

					imagenOponente.setImage(imagenMaquina);

					log = Logger.getOrCreateFileWriter();
					date = new Date();
					data = date.toString() + " INFO cambio2 " + entrenadorAleatorio.getName() + " cambia a su pokemon por "
							+ pokemonElegidoMaquina.getName() + ", turno = " + turno + "\n";
					Logger.write(log, data);
					Logger.close(log);
//					
				}

			} else
				turnoJugador = "Estas " + pokemonElegidoJugador.getStatus();

			// ATACA LA MAQUINA

			movimietoMaquina = Batalla.movimientoAleatorioMaquina(pokemonElegidoMaquina);

			if (Batalla.comprobraEstamina(pokemonElegidoMaquina, movimietoMaquina)) {

				// si no tiene ningun estado que le impide atacar
				if (Batalla.atacar(pokemonElegidoMaquina, pokemonElegidoJugador, movimietoMaquina)) {

					turnoOponente = "la máquina ha elegido " + movimietoMaquina.getName();

					if (Batalla.vidaPokemonAtacado(pokemonElegidoJugador)) {

						// al matar al pokemonjugador la máquina gana experiencia
						
						log = Logger.getOrCreateFileWriter();
						Date date = new Date();
						data = date.toString() + " INFO debilitado1 pokemon = {" + pokemonElegidoJugador.getName() + ", "
								+ pokemonElegidoJugador.getLevel() + ", " + entrenadorJugador.getName() + "}, pokemonRival = {"
								+ pokemonElegidoMaquina.getName() + ", " + pokemonElegidoMaquina.getLevel() + ", "
								+ entrenadorAleatorio.getName() + "}, turno = " + turno + "\n";
						Logger.write(log, data);
						Logger.close(log);
						
						pokemonElegidoMaquina.giveExp(pokemonElegidoJugador);

						contadorJugador++;

						equipoJugador.remove(pokemonElegidoJugador);

						// si mata la máquina al jugador entra para que el jugador elija otro pokemon
						if (equipoJugador.size() > 0) {

							// se abre la ventana con los pokemon del jugador para que seleccione otro
							FXMLLoader loader2 = new FXMLLoader(
									getClass().getResource("/vista/ElegirPokemonBatalla.fxml"));

							Parent root2 = loader2.load();

							Scene scene2 = new Scene(root2);

							Stage stage2 = new Stage();

//							stage.initModality(Modality.APPLICATION_MODAL); //(hace que la ventana sea modal)

							stage2.setScene(scene2);
							stage2.showAndWait();

							pokemonElegidoJugador = ElegirPokemonBatallaController.pokemonElegido;

							imagenAtaqueJugador = new Image(
									getClass().getResourceAsStream(pokemonElegidoJugador.getImagen()));

							imagenJugador.setImage(imagenAtaqueJugador);

							movimietoJugador = null;

						}

					}

				} else
					turnoOponente = "La máquina está " + pokemonElegidoMaquina.getStatus();

			} else {

				turnoOponente = "La maquina descansa, no tiene suficiente estamina";

				pokemonElegidoMaquina.recuperarEstamina();
			}

			vidaJugador = pokemonElegidoJugador.getVit();

			double vidaJugadorDouble = vidaJugador / 100;
			System.out.println("vida jugador" + vidaJugadorDouble);

			barra.setProgress(vidaJugadorDouble);

			vidaMaquina = pokemonElegidoMaquina.getVit();

			double vidaMaquinaDouble = vidaMaquina / 100;

			barraMaquina.setProgress(vidaMaquinaDouble);

			barraEstaminaJugador.setProgress((double) pokemonElegidoJugador.getStamina() / (double) 100);

			barraEstaminaMaquina.setProgress((double) pokemonElegidoMaquina.getStamina() / (double) 100);

//			imagenJugador.setImage(new Image(getClass().getResourceAsStream(pokemonElegidoJugador.getImagen())));

			// pierde la máquina
			if (contadorMaquina == entrenadorAleatorio.getEquipoPokemon().size()) {

				log = Logger.getOrCreateFileWriter();
				Date date = new Date();
				data = date.toString() + " INFO finGanaCombate " + entrenadorJugador.getName() + " gana contra "
						+ entrenadorAleatorio.getName() + ", turno = " + turno + "\n";
				Logger.write(log, data);
				Logger.close(log);
				
				mediaPlayer.stop();

				contadorJugador = 0;

				contadorMaquina = 0;

				Batalla.restablecerVidaYEstamina(entrenadorJugador.getEquipoPokemon());

				Batalla.restablecerVidaYEstamina(entrenadorAleatorio.getEquipoPokemon());

				Batalla.premioGanadorBatalla(entrenadorJugador, entrenadorAleatorio);

				resultado = "Enhorabuena, has ganado\n" + "Tu saldo actual es de " + entrenadorJugador.getPokeDollar()
						+ " pokedollares";

				// la foto de fondo de la vista ResultadoCombate cambia dependiendo de si gana o
				// pierde el combate
				imagenResultado = new Image(getClass().getResourceAsStream("/img/fondoPrimero.jpg"));

				movimietoJugador = null;

				// se cierra la ventana actual
				Stage stage2 = (Stage) this.atacar.getScene().getWindow();
				stage2.close();

				// se abre cuando se termina el combate, indica como ha concluido
				FXMLLoader loader2 = new FXMLLoader(getClass().getResource("/vista/ResultadoCombate.fxml"));

				Parent root2 = loader2.load();

				Scene scene2 = new Scene(root2);

				Stage stage3 = new Stage();

//				stage.initModality(Modality.APPLICATION_MODAL); //(hace que la ventana sea modal)

				stage3.setScene(scene2);
				stage3.showAndWait();

			}

			// pierde el jugador
			if (contadorJugador == entrenadorJugador.getEquipoPokemon().size()) {

				log = Logger.getOrCreateFileWriter();
				Date date = new Date();
				data = date.toString() + " INFO finPierdeCombate " + entrenadorJugador.getName() + " pierde contra "
						+ entrenadorAleatorio.getName() + ", turno = " + turno + "\n";
				Logger.write(log, data);
				Logger.close(log);
				
				mediaPlayer.stop();

				contadorJugador = 0;

				contadorMaquina = 0;

				Batalla.restablecerVidaYEstamina(entrenadorJugador.getEquipoPokemon());

				Batalla.restablecerVidaYEstamina(entrenadorAleatorio.getEquipoPokemon());

				Batalla.premioGanadorBatalla(entrenadorAleatorio, entrenadorJugador);

				resultado = "Lo siento, has perdido\n" + "Tu saldo actual es de " + entrenadorJugador.getPokeDollar()
						+ " pokedollares";

				// la foto de fondo de la vista ResultadoCombate cambia dependiendo de si gana o
				// pierde el combate
				imagenResultado = new Image(getClass().getResourceAsStream("/img/resultadoCombatePierde.jpg"));

				movimietoJugador = null;

//				 se cierra la ventana actual
				Stage stage2 = (Stage) this.atacar.getScene().getWindow();
				stage2.close();

				// se abre cuando se termina el combate, indica como ha concluido
				FXMLLoader loader2 = new FXMLLoader(getClass().getResource("/vista/ResultadoCombate.fxml"));

				Parent root2 = loader2.load();

				Scene scene2 = new Scene(root2);

				Stage stage3 = new Stage();

//				stage.initModality(Modality.APPLICATION_MODAL); //(hace que la ventana sea modal)

				stage3.setScene(scene2);
				stage3.showAndWait();

			}

		} else
			turnoJugador = "NO TIENES ESTAMINA SUFICIENTE";

//-----------------------------------------------------------------------------------

		muestraTurno.setText(turnoJugador + "\n" + "\n" + turnoOponente);

	}

	// Event Listener on Button[#salir].onAction
	@FXML
	public void salir(ActionEvent event) {
		// TODO Autogenerated

		mediaPlayer.stop();
		Logger.close(log);
		

		contadorJugador = 0;

		contadorMaquina = 0;

		Batalla.restablecerVidaYEstamina(entrenadorJugador.getEquipoPokemon());

		Batalla.restablecerVidaYEstamina(entrenadorAleatorio.getEquipoPokemon());

		Batalla.premioGanadorBatalla(entrenadorAleatorio, entrenadorJugador);

		movimietoJugador = null;

		// se cierra la ventana actual
		Stage stage2 = (Stage) this.atacar.getScene().getWindow();
		stage2.close();

	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) throws NoSuchElementException {
		// TODO Auto-generated method stub

		equipoJugador = new LinkedList<Pokemon>(entrenadorJugador.getEquipoPokemon());

		pokemonElegidoJugador = equipoJugador.getFirst();

		movimientosPokemonEnCombate = pokemonElegidoJugador.getMoves();

		entrenadorAleatorio = CargarEntrenador.obtenerEntrenadorAleatorio();

		equipoMaquina = new LinkedList<Pokemon>(entrenadorAleatorio.getEquipoPokemon());

//		 try {
//		      FileWriter file = new FileWriter("batallaLogger.txt", true);
//
//		      BufferedWriter output = new BufferedWriter(file);
//
//		      output.write("equipo maquina " + equipoMaquina.toString());
//
//		      output.flush();
//		      System.out.println("Data is flushed to the file.");
//
//		      output.close();
//		    }
//
//		    catch(Exception e) {
//		      e.getStackTrace();
//		    }

		System.out.println("equipo maquina " + equipoMaquina.toString());

		pokemonElegidoMaquina = equipoMaquina.get(contadorMaquina);

		imagenAtaqueJugador = new Image(getClass().getResourceAsStream(pokemonElegidoJugador.getImagen()));

		Image imagenMaquina = new Image(getClass().getResourceAsStream(pokemonElegidoMaquina.getImagen()));

		imagenJugador.setImage(imagenAtaqueJugador);

		imagenOponente.setImage(imagenMaquina);

		barra.setProgress(1);

		log = Logger.getOrCreateFileWriter();
		Date date = new Date();
		turno = 1;
		data = date.toString() + " INFO inicioCombate pokemon = {" + pokemonElegidoJugador.getName() + ", "
				+ pokemonElegidoJugador.getLevel() + ", " + entrenadorJugador.getName() + "}, pokemonRival = {"
				+ pokemonElegidoMaquina.getName() + ", " + pokemonElegidoMaquina.getLevel() + ", "
				+ entrenadorAleatorio.getName() + "}, turno = " + turno + "\n";
		Logger.write(log, data);
		Logger.close(log);
		
		String path ="src\\sound\\battle.mp3";
		File archivo = new File(path);
		Media media = new Media(archivo.toURI().toString());
		mediaPlayer = new MediaPlayer(media);
		mediaPlayer.setCycleCount(MediaPlayer.INDEFINITE);
		mediaPlayer.play();

	}
}
