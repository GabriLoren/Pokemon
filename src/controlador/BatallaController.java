package controlador;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import modelo.Move;
import modelo.Pokemon;
import modelo.Trainer;

import java.io.IOException;
import java.net.URL;
import java.util.LinkedList;
import java.util.ResourceBundle;

import cargar.CargarEntrenador;
import cargar.CargarTodosLosEntrenadores;
import funcionalidades.Batalla;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

public class BatallaController implements Initializable {

	@FXML
	private Button seleccionar;
	@FXML
	private TableView tabla;
	@FXML
	private TableColumn mote;
	@FXML
	private TableColumn nombre;
	@FXML
	private TableColumn ataque;
	@FXML
	private TableColumn defensa;
	@FXML
	private TableColumn ataqueSp;
	@FXML
	private TableColumn defensaSp;
	@FXML
	private TableColumn velocidad;
	@FXML
	private TableColumn estamina;
	@FXML
	private TableColumn nivel;
	@FXML
	private TableColumn vitalidad;
	@FXML
	private TableColumn tipo1;
	@FXML
	private TableColumn tipo2;
	@FXML
	private Button atacar;

	private static Trainer entrenadorJugador = CargarEntrenador.getEntrenador();

	private static LinkedList<Pokemon> equipoUsuario = entrenadorJugador.getEquipoPokemon();

	private static LinkedList<Pokemon> equipoJugador = new LinkedList<Pokemon>(equipoUsuario);
	
	

	public static LinkedList<Pokemon> getEquipoJugador() {
		return equipoJugador;
	}

	public void setEquipoJugador(LinkedList<Pokemon> equipoJugador) {
		this.equipoJugador = equipoJugador;
	}

	private Trainer entrenadorAleatorio;

	private static int contadorMaquina = 0;

	private static int contadorJugador = 0;

	private static int pokemonElegido = 0;
	
	private static Pokemon pokemonElegidoObjeto = equipoUsuario.get(0);
	
	
	

	public static Pokemon getPokemonElegidoObjeto() {
		return pokemonElegidoObjeto;
	}

	public static void setPokemonElegidoObjeto(Pokemon pokemonElegidoObjeto) {
		BatallaController.pokemonElegidoObjeto = pokemonElegidoObjeto;
	}

	// todos los entrenadores que hay en la base de datos
	private LinkedList<Trainer> todosLosEntrenadores = CargarTodosLosEntrenadores.getTodosLosEntrenadores();

	// probamos con un movimiento que creamos
	private Move movimietoJugador = new Move(null, 0, "ATAQUE", 10, null, null, 0, 0);
	private Move movimietoMaquina = new Move(null, 0, "ATAQUE", 25, null, null, 0, 0);

	
	
	 
	 
		// Event Listener on Button[#seleccionar].onAction
	@FXML
	public void seleccionar(ActionEvent event) {
		// TODO Autogenerated
		
	}

	// Event Listener on Button[#atacar].onAction
	@FXML
	public void atacar(ActionEvent event) throws IOException {
		// TODO Autogenerated

		// ataca el jugador con el pokemon en la posición cero por
		// defecto(pokemonElegido)
		if (Batalla.atacar(pokemonElegidoObjeto,
				entrenadorAleatorio.getEquipoPokemon().get(contadorMaquina), movimietoJugador)) {

			// al aumentar se obtiene el siguiente pokemon de la lista de los pokemon de la
			// máquina y tambien aumenta
			// el contador que indica que todos los pokemon de la máquina han muerto
			contadorMaquina++;

//			if(contadorMaquina<entrenadorAleatorio.getEquipoPokemon().size());
//			System.out.println("la máquina saca un "+entrenadorAleatorio.getEquipoPokemon().get(contadorMaquina));
		}

		// ataca la máquina, si el método devuelve true es que ha matado al pokemon del
		// jugador y suma uno al contadorJugador
		if (Batalla.atacar(entrenadorAleatorio.getEquipoPokemon().get(contadorJugador),
				pokemonElegidoObjeto, movimietoMaquina)) {
			
			contadorJugador++;
			
			if(contadorJugador<equipoUsuario.size()) {
				//elimina el pokemon que ha muerto de la lista de los pokemon disponible para luchar
				equipoJugador.remove(pokemonElegidoObjeto);
				// se abre la ventana con los pokemon del jugador para que seleccione otro
				FXMLLoader loader = new FXMLLoader(getClass().getResource("/vista/ElegirPokemonBatalla.fxml"));

				Parent root = loader.load();

				Scene scene = new Scene(root);

				Stage stage = new Stage();
//						stage.initModality(Modality.APPLICATION_MODAL); (hace que la ventana sea modal)

				stage.setScene(scene);
				stage.show();
			}



			
		}

		
//		if(contadorMaquina<entrenadorAleatorio.getEquipoPokemon().size());
//		System.out.println("vida del pokemonMaquina "+entrenadorAleatorio.getEquipoPokemon().get(contadorMaquina).getVit());

		// si el contador el igual que el tamaño de la lista que contiene los pokemon de
		// la máquina
		// el jugador gana la batalla
		if (contadorMaquina == entrenadorAleatorio.getEquipoPokemon().size())
			System.out.println("has ganado el combate");

		if (contadorJugador == entrenadorJugador.getEquipoPokemon().size()) {

			System.out.println("has perdido el combate");
			// se cierra la ventana actual
			Stage stage2 = (Stage) this.atacar.getScene().getWindow();
			stage2.close();
		}
		System.out.println(
				"vida del pokemonJugador " + entrenadorJugador.getEquipoPokemon().get(contadorJugador).getVit());
	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub

		entrenadorAleatorio = CargarEntrenador.obtenerEntrenadorAleatorio(todosLosEntrenadores);
		
		

	

	}




	
}
